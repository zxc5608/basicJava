package E_oop;

public class VariableInit {

	//명시적 초기화
	int var =10;
	static int staticVar = 20;
	
	//초기화 블럭
	{             //왜 블럭을 사용하는가  명시적초기화는 값만 넣을수있지만
            		// 초기화블럭에 하면 여러줄이 필요할때 사용한다
		var = 30;
	}
	static{
		staticVar = 40;
	}

	/*
	 * 생성자
	 * - 클래스와 같은 이름의 메서드
	 * - 인스턴스 변수를 초기화 하기위해 사용한다.
	 * - 클래스에 생성자는 반드시 하나 이상 존재 해야한다.
	 * - 직접 선언 해주지 않으면 컴파일러가 기본 생성자를 만들어준다
	 * - 생성자는 리턴타입이 없다.
	 */
	
	VariableInit(){
		
		var= 50;
		//staticVar=60;
		// 값을 공유해야 하는 클래스 변수가 객체생성시 마다계속 초기화되기 때문에
		// 클래스 변수를 생성자에거 초기화하는 것은 좋지 않다.
		
		//생성자 사용 이유
		//초기화에 여러줄의 코드가 필요할때
		//초기화에 파라미터가 필요할때
	}
	public static void main(String[]args){
		Init i =new Init();
		i.a=10;
		i.b=20;
		i.b=30;
									//파라미터가 없는 생성자를 만들어줘야 컴파일에러가 사라졌다.
		Init i2 =new Init();
		i2.a=10;
		i2.b=20;
		i2.c=30;
		
		Init i3 =new Init(70,80,90);//생성자를 통해 객체를 생성했다.
		
		}
	
	

}
	class Init{  //안에다  생성자를 만든다
		int a;
		int b;
		int c;
		
		Init(int a,int b, int c){
			this.a = a;  //디스를 붙이지 않으면 지역변수
			this.b = b;
			this.c = c;
			//this 인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기위해 사용한다.
		}
		//파라미터로 구분할수있다. 
		//파라미터가 다르면 같은이름의 메서드를 여러개만들수있따
		//오버로딩 : 같은 이름의 메서드를 여러개정의하는것
		Init(){
			this(10,20,30);
//			a=10;
//			b=20;
//			c=30;
			//this():생성자에서 다른 생성자를 호출할때 사용한다. (this는 생성자의 가장 첫줄에서 사용해야한다.)
			
		}
		
	}

	
